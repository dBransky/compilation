%{
	#include <iostream>
	#include <stdlib.h>
	#include "classes.hpp"
	#include "hw3_output.hpp"
	using namespace std;
	extern int yylex();
	int yyerror(const char * message);

%}
%nonassoc VOID;//
%nonassoc INT;//
%nonassoc BYTE;//
%nonassoc B;//
%nonassoc BOOL;///
%nonassoc ENUM;////
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMA;
%nonassoc LBRACE;
%nonassoc RBRACE;
%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%right ASSIGN;
%left OR;
%left AND;
%left RELOPL;
%nonassoc RELOPN;
%left ADD;
%left MUL;
%left RPAREN;
%right IF;
%right ELSE;
%left LPAREN;
%right NOT;
%nonassoc XXX;
%nonassoc XX;

%%

Program :		  	 {$$= new Program();} Funcs {endProgram();};
Funcs :	     	    %prec XXX {$$= new Funcs ();}
								 | FuncDecl Funcs %prec XX{$$= new Funcs ();};
FuncDecl :   	   RetType ID LPAREN Formals RPAREN {$$= new FuncDecl(dynamic_cast<RetType*>($1),$2,dynamic_cast<Formals*>($4));} LBRACE OS {enterArguments(dynamic_cast<Formals*>($4));} Statements CS {endFunc();} RBRACE ;
RetType : 	  	 Type {$$= new RetType(dynamic_cast<Type*> ($1));}
								 | VOID {$$= new RetType($1);};
Formals :     	   {$$= new Formals ();}
								 |FormalsList {$$= new Formals(dynamic_cast<FormalsList*> ($1));};
FormalsList : 	 FormalDecl {$$= new FormalsList(dynamic_cast<FormalDecl*> ($1));}
								 | FormalDecl COMMA FormalsList {$$= new FormalsList (dynamic_cast<FormalsList*> ($3),dynamic_cast<FormalDecl*> ($1));};
FormalDecl :  	 Type ID {$$= new FormalDecl (dynamic_cast<Type*> ($1),$2);}
Statements : 	   Statement {$$= new Statements (dynamic_cast<Statement*> ($1));}
								 | Statements Statement {$$= new Statements (dynamic_cast<Statements*> ($1), dynamic_cast<Statement*> ($2));};
Statement : 		 LBRACE OS Statements CS RBRACE {$$= new Statement (dynamic_cast<Statements*> ($1));}
								 | Type ID SC {$$= new Statement (dynamic_cast<Type*> ($1),$2);}
								 | Type ID ASSIGN Exp SC {$$= new Statement (dynamic_cast<Type*> ($1),$2,dynamic_cast<Exp*> ($4));}
								 | ID ASSIGN Exp SC {$$= new Statement ($1, dynamic_cast<Exp*> ($3));}
								 | Call SC {$$= new Statement (dynamic_cast<Call*> ($1));}
								 | RETURN SC {$$= new Statement ("VOID");}
								 | RETURN Exp SC {$$= new Statement (dynamic_cast<Exp*> ($2));}
								 | IF LPAREN FRUIT RPAREN OS Statement {$$= new Statement ("if", dynamic_cast<Exp*> ($3)); closeScope();}  
								 | IF LPAREN FRUIT RPAREN OS Statement ELSE {$$= new Statement ("if else", dynamic_cast<Exp*> ($3)); closeScope();} OS Statement CS   
								 | WHILE LPAREN Exp RPAREN {$$= new Statement ("while", dynamic_cast<Exp*> ($3));inLoop();} OS Statement CS { outLoop();}
								 | BREAK SC {$$= new Statement ($1);}
								 | CONTINUE SC {$$= new Statement ($1);};
Call :       	   ID LPAREN ExpList RPAREN {$$= new Call ($1,dynamic_cast<ExpList*> ($3));}
								 | ID LPAREN RPAREN {$$= new Call ($1);};
ExpList : 		 	 Exp {$$= new ExpList (dynamic_cast<Exp*> ($1));}
								 | Exp COMMA ExpList {$$= new ExpList (dynamic_cast<Exp*> ($1),dynamic_cast<ExpList*> ($3));};
Type : 		 			 INT {$$= new Type ($1);}//
								 | BYTE {$$= new Type ($1);}
								 | BOOL {$$= new Type ($1);};
Exp :      	  	 LPAREN Exp RPAREN {$$= new Exp(dynamic_cast<Exp*> ($2));}
								 | Exp AND Exp {$$= new Exp(dynamic_cast<Exp*> ($1),$2,dynamic_cast<Exp*> ($3),"AND");}
								 | Exp OR Exp {$$= new Exp(dynamic_cast<Exp*> ($1),$2,dynamic_cast<Exp*> ($3),"OR");}
								 | Exp IF LPAREN Exp RPAREN ELSE Exp {$$= new Exp(dynamic_cast<Exp*> ($1),dynamic_cast<Exp*> ($2),dynamic_cast<Exp*> ($3));}
								 | ID {$$= new Exp($1);}
								 | Call {$$= new Exp(dynamic_cast<Call*> ($1));}
								 | NUM {$$= new Exp($1,"num");}
								 | NUM B {$$= new Exp($1,"B");}
  						   | STRING {$$= new Exp($1,"STRING");}
								 | TRUE {$$= new Exp($1,"BOOL");}
								 | FALSE {$$= new Exp($1,"BOOL");}
								 | NOT Exp {$$= new Exp($1,dynamic_cast<Exp*> ($2));}
								 | Exp RELOPL Exp {$$= new Exp(dynamic_cast<Exp*> ($1),$2,dynamic_cast<Exp*> ($3),"RELOPL");}
								 | Exp RELOPN Exp {$$= new Exp(dynamic_cast<Exp*> ($1),$2,dynamic_cast<Exp*> ($3),"RELOPN");}
  						   | Exp ADD Exp {$$= new Exp(dynamic_cast<Exp*> ($1),$2,dynamic_cast<Exp*> ($3),"ADD");}
							   | Exp MUL Exp {$$= new Exp(dynamic_cast<Exp*> ($1),$2,dynamic_cast<Exp*> ($3),"MUL");}
							   | LPAREN Type RPAREN Exp {$$= new Exp(dynamic_cast<Type*> ($2),dynamic_cast<Exp*> ($4));};


FRUIT:	Exp {$$= new Exp(dynamic_cast<Exp*>($1),"STRING");};
OS:						 		{openScope();};
CS:								{closeScope();};


%%


int main()
{
	return yyparse();
}

int yyerror(const char * message)
{
	output::errorSyn(yylineno);
	exit(0);
}